def initialize_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

def display_board(board):
    for row in board:
        print(' '.join(row))

def get_player_move():
    row, col = map(int, input("Enter row and column (0-2): ").split())
    return row, col

def is_valid_move(board, row, col):
    return 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' '

def make_move(board, player, row, col):
    board[row][col] = player

def check_winner(board, player):
    # Implement logic to check for a winner
    # (rows, columns, diagonals)

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def play_tic_tac_toe():
    current_player = 'X'
    game_board = initialize_board()
    while True:
        display_board(game_board)
        print(f"Player {current_player}'s turn.")
        move = get_player_move()
        if is_valid_move(game_board, *move):
            make_move(game_board, current_player, *move)
            if check_winner(game_board, current_player):
                print(f"Player {current_player} wins!")
                break
            elif is_board_full(game_board):
                print("The game ends in a tie!")
                break
            else:
                current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Invalid move. Try again.")

play_tic_tac_toe()
